---
- hosts: k8s_cluster
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/kubernetes-archive-keyring.gpg
   
    - name: Wait for apt cache to refresh
      pause:
        seconds: 5     

    - name: Mettre à jour les dépôts apt
      apt:
        update_cache: yes

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: "kubernetes"    

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/swap/d' /etc/fstab

    # - name: Check if Kubernetes is already initialized
    #   command: kubeadm config view
    #   register: kubeadm_status
    #   ignore_errors: true
    
    - name: Initialize Kubernetes cluster on master
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16  --apiserver-advertise-address=192.168.56.10
      when: inventory_hostname == "192.168.56.10"

    - name: Ensure .kube directory exists
      file:
        path: "/home/vagrant/.kube"
        state: directory
        mode: '0755'
        owner: vagrant
        group: vagrant
      become: true

    - name: Copy kubeconfig to user directory on master
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/vagrant/.kube/config"
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: '0644'
      when: inventory_hostname == "192.168.56.10"
      become: true
       
    - name: Set KUBECONFIG environment variable
      lineinfile:
        path: ~/.bashrc
        line: 'export KUBECONFIG=/home/vagrant/.kube/config'
        create: yes

    - name: Apply Flannel CNI network to the cluster
      shell: |
        export KUBECONFIG=/home/vagrant/.kube/config
        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      when: inventory_hostname == "192.168.56.10"
      register: flannel_apply

    - name: Exécuter kubeadm pour récupérer la commande de jonction
      shell: kubeadm token create --print-join-command
      register: join_command
      when: inventory_hostname == "192.168.56.10"
      become: true
    
    - name: Debug join_command (y compris en cas d'erreur)
      debug:
        msg: >
          Résultat de la commande :
          stdout: {{ join_command.stdout }}
          stderr: {{ join_command.stderr }}
          rc: {{ join_command.rc }}
      when: inventory_hostname == "192.168.56.10"

    - name: Sauvegarder la commande de jonction pour tous les hôtes
      set_fact:
        join_command_to_workers: "{{ join_command.stdout }}"
      when: inventory_hostname == "192.168.56.10"

    - name: Appliquer la commande de jonction sur les workers
      shell: "{{ hostvars['192.168.56.10'].join_command_to_workers }}"
      become: true
      register: join_result
      when: inventory_hostname != "192.168.56.10"

    - name: Afficher le résultat de la jonction
      debug:
        msg: "Résultat de la jonction du worker {{ inventory_hostname }} : {{ join_result.stdout }}"
      when: inventory_hostname != "192.168.56.10"
    
    - name: Copier kube/config depuis le master vers la machine locale
      fetch:
        src: "/home/vagrant/.kube/config"  # Chemin du fichier sur le master
        dest: "/tmp/kube-config"           # Chemin temporaire sur la machine de contrôle
        flat: yes
      when: inventory_hostname == "192.168.56.10"  # Exécution uniquement sur le master

    - name: Copier kube/config vers les workers si le fichier existe
      copy:
        src: "/tmp/kube-config"
        dest: "/home/vagrant/.kube/config"
        owner: vagrant
        group: vagrant
        mode: '0644'
      become: true
    
    - name: Vérifier que les nodes sont joints
      shell: |
        export KUBECONFIG=/home/vagrant/.kube/config
        kubectl get nodes
      register: nodes_status
      when: inventory_hostname == "192.168.56.10"

    - name: Debug node statuses
      debug:
        msg: "{{ nodes_status.stdout }}"
      when: nodes_status is defined